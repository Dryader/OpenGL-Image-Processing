#version 330

in vec3 retColor; // MUST use same name as out variable used by vertex shader
in vec2 retTexCoord; // MUST use same name as out variable used by vertex shader

out vec4 FragColor; 

uniform sampler2D sampler1; 
uniform sampler2D sampler2; // second texture for 50% blend

uniform float yScale; // 0.0 - 2.0 (0-200%)
uniform float uScale; // 0.0 - 2.0
uniform float vScale; // 0.0 - 2.0
uniform bool invertColors; // invert final rgb if true

vec3 rgb2yuv(vec3 rgb)
{
    float Y = dot(rgb, vec3(0.299, 0.587, 0.114));
    float U = dot(rgb, vec3(-0.14713, -0.28886, 0.436));
    float V = dot(rgb, vec3(0.615, -0.51499, -0.10001));
    return vec3(Y, U, V);
}

vec3 yuv2rgb(vec3 yuv)
{
    float Y = yuv.x; float U = yuv.y; float V = yuv.z;
    float R = Y + 1.13983 * V;
    float G = Y - 0.39465 * U - 0.58060 * V;
    float B = Y + 2.03211 * U;
    return vec3(R, G, B);
}

void main()
{
    vec4 t1 = texture(sampler1, retTexCoord);
    vec4 t2 = texture(sampler2, retTexCoord);
    vec4 vtxColor = vec4(retColor, 1.0);

    vec4 base = mix(t1, t2, 0.5) * vtxColor;

    vec3 yuv = rgb2yuv(base.rgb);
    yuv.x *= yScale; // Y
    yuv.y *= uScale; // U
    yuv.z *= vScale; // V
    vec3 rgb = yuv2rgb(yuv);

    if (invertColors)
        rgb = vec3(1.0) - rgb;

    FragColor = vec4(rgb, base.a);
}